const fs = require('fs')
const Extra = require('telegraf/extra')
const AppController = require('../../src/controllers/AppController')

class AccountControllers {
  welcomeMessage(ctx) {
    ctx.reply(
      `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${ctx.from.first_name}</b>\n\n–Ø —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ —Å <code>Google Data Studio</code>.`,
      Extra.HTML().markup((m) =>
        m.inlineKeyboard([[m.callbackButton(`üìù –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç`, 'req')]])
      )
    )
  }

  toRequestURL(ctx) {
    ctx.scene.enter('urlrequest')
  }

  requestURL(ctx) {
    ctx.reply(
      `üñ• –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ PDF-—Ñ–∞–π–ª–∞</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>sorare.com</code>
      </i>`,
      Extra.HTML()
    )
  }

  async resURL(ctx) {
    ctx.reply(
      `üìã –•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –í–∞—Å <b>–æ—Ç—á—ë—Ç –ø–æ —Å–∞–π—Ç—É ${ctx.message.text}</b>, –æ–∂–∏–¥–∞–π—Ç–µ.`,
      Extra.HTML()
    )
    let url = ctx.message.text
    let filePath

    try {
      filePath = await AppController.getReportByURL(url)

      if (filePath) {
        await ctx.scene.leave()

        await ctx.reply(`‚úÖ –í–∞—à –æ—Ç—á—ë—Ç <b>–≥–æ—Ç–æ–≤!</b>`, Extra.HTML())

        let urlToSend = url.split('/')

        switch (urlToSend[0]) {
          case 'https:':
            urlToSend = urlToSend[2]
            break
          case 'http:':
            urlToSend = urlToSend[2]
            break
          default:
            urlToSend = urlToSend[0]
        }

        await ctx.replyWithDocument(
          {
            source: filePath,
            filename: `${urlToSend}.pdf`,
          },
          Extra.markup((m) =>
            m.inlineKeyboard([
              [m.callbackButton(`üìù –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç`, 'rndmsht')],
            ])
          )
        )

        fs.unlinkSync(filePath)
      } else {
        ctx.reply(`üöß –ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç, –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ.`)
      }
    } catch (e) {
      ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, \n\n<code>${e}</code>`, Extra.HTML())
    }
  }

  msgTypeError(ctx) {
    ctx.reply('ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!')

    ctx.scene.reenter()
  }
}

module.exports = new AccountControllers()
